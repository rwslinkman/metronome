<?xml version="1.0" encoding="UTF-8"?>
<project name="Metronome - Symfony Test Utility" default="full-build">

    <!-- Windows machines -->
    <!--<property name="pdepend" value="${basedir}/vendor/bin/pdepend.bat"/>-->
    <!--<property name="phpcpd"  value="${basedir}/vendor/bin/phpcpd.bat"/>-->
    <!--<property name="phpcs"   value="${basedir}/vendor/bin/phpcs.bat"/>-->
    <!--<property name="phploc"  value="${basedir}/vendor/bin/phploc.bat"/>-->
    <!--<property name="phpmd"   value="${basedir}/vendor/bin/phpmd.bat"/>-->
    <!--<property name="phpunit" value="${basedir}/vendor/bin/phpunit.bat"/>-->
    <!--<property name="humbug" value="${basedir}/vendor/bin/humbug.bat"/>-->
    <!--<property name="humbughtml" value="${basedir}/vendor/letscodehu/humbughtml/bin/humbughtml.bat"/>-->
    <!-- Buildserver / Unix machines -->
    <property name="pdepend" value="${basedir}/vendor/bin/pdepend"/>
    <property name="phpcpd"  value="${basedir}/vendor/bin/phpcpd"/>
    <property name="phpcs"   value="${basedir}/vendor/bin/phpcs"/>
    <property name="phploc"  value="${basedir}/vendor/bin/phploc"/>
    <property name="phpmd"   value="${basedir}/vendor/bin/phpmd"/>
    <property name="phpunit" value="${basedir}/vendor/bin/phpunit"/>
    <property name="humbug" value="${basedir}/vendor/bin/humbug"/>
    <property name="humbughtml" value="${basedir}/vendor/letscodehu/humbughtml/bin/humbughtml"/>

    <target name="full-build"
            depends="prepare,static-analysis,phpunit-with-coverage,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="full-build-parallel"
            depends="prepare,static-analysis-parallel,phpunit,-check-failure"
            description="Performs static analysis (executing the tools in parallel), runs the tests, and generates project documentation"/>

    <target name="quick-build"
            depends="prepare,lint,phpunit"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>

    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis" />

    <!-- Adjust the threadCount attribute's value to the number of CPUs -->
    <target name="static-analysis-parallel"
            description="Performs static analysis (executing the tools in parallel)">
        <parallel threadCount="2">
            <sequential>
                <antcall target="pdepend"/>
                <antcall target="phpmd-ci"/>
            </sequential>
            <antcall target="lint"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="phploc-ci"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <mkdir dir="${basedir}/build/phpcs"/>
        <mkdir dir="${basedir}/build/phploc"/>
        <mkdir dir="${basedir}/build/phpmd"/>
        <mkdir dir="${basedir}/build/humbug"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l" />

            <fileset dir="${basedir}/src">
                <include name="**/*.php" />
                <modified />
            </fileset>
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests" />
            <arg value="--log-csv" />
            <arg path="${basedir}/build/phploc/phploc.csv" />
            <arg value="--log-xml" />
            <arg path="${basedir}/build/phploc/phploc.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/pdepend/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="text" />
            <arg path="${basedir}/app/build/phpmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/src" />
            <arg value="xml" />
            <arg path="${basedir}/app/build/phpmd.xml" />
            <arg value="--reportfile" />
            <arg path="${basedir}/build/phpmd/pmd.xml" />
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="${basedir}/build/phpcs/phpcs.txt" taskname="phpcs">
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}/build/phpcs/phpcs.xml" />
            <arg value="--standard=PSR2" />
            <arg value="--extensions=php" />
            <arg value="--ignore=autoload.php" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd" />
            <arg path="${basedir}/build/phpmd/pmd-cpd.xml" />
            <arg path="${basedir}/src" />
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit-with-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--log-junit=build/phpunit/phpunit_log.xml"/>
            <arg value="--coverage-clover=build/coverage/clover.xml"/>
            <arg value="--coverage-html=build/coverage/web"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--no-coverage"/>
            <arg value="--log-junit=build/phpunit/phpunit_log.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <!-- Mutation Tests -->
    <target name="humbug-mutation-test"
            unless="humbug-mutation-test.done"
            depends="prepare,script-class-names"
            description="Run Humbug mutation tests">
        <exec executable="${humbug}"/>
        <property name="humbug-mutation-test.done" value="true"/>
    </target>

    <target name="script-class-names"
            unless="script-class-names.done"
            description="Write all class names to a file for Humbug">
        <exec executable="php" dir="${basedir}">
            <arg value="${basedir}/scripts/scanscript.php" />
        </exec>
        <property name="script-class-names.done" value="true"/>
    </target>

    <target name="humbug-mutation-test-stats"
            unless="humbug-mutation-test-stats.done"
            depends="humbug-mutation-test"
            description="Gathers statistics about Humbug mutation test after it runs">
        <exec executable="${humbug}">
            <arg value="stats" />
            <arg value="build/humbug/humbuglog.json" />
            <arg value="build/humbug/list-of-classes.txt" />
        </exec>
        <property name="humbug-mutation-test-stats.done" value="true"/>
    </target>

    <target name="humbug-mutation-test-report"
            unless="humbug-mutation-test-report.done"
            depends="humbug-mutation-test-stats"
            description="Converts Humbug statistics to readable HTML file">
        <exec executable="${humbughtml}">
            <arg value="--logfile=build/humbug/humbuglog.json" />
            <arg value="--outdir=build/humbug/html" />
        </exec>
        <property name="humbug-mutation-test-report.done" value="true"/>
    </target>
    <!-- end of Mutation Tests -->

</project>